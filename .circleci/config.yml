version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  change-api: financial-times/change-api@0.22.0
  ft-snyk-orb: financial-times/ft-snyk-orb@0

executors:
  golang:
    docker:
      - image: circleci/golang:1.17
  golang-node:
    docker:
      - image: circleci/golang:1.17-node
  python-node:
    docker:
      - image: circleci/python:3.7-node

commands:
  install_dependencies:
    steps:
      - restore_cache:
          key: v1-gomod-{{ checksum "go.sum" }}

      - run:
          name: Download dependencies
          command: go mod download

      - save_cache:
          key: v1-gomod-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  attach_golang_workspace:
    steps:
      - attach_workspace:
          at: ~/project

  docker_logins:
    steps:
      - run:
          name: Login to Nexus and DockerHub
          command: |
            echo "Logging into FT Nexus"
            echo "$DOCKER_REGISTRY_PASSWORD" | docker login nexus.in.ft.com:5000 --username "$DOCKER_REGISTRY_USERNAME" --password-stdin
            echo "Logging into Docker Hub repository"
            echo "$DOCKERHUB_ACCESS_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin

  load_docker_image:
    steps:
      - run:
          name: Load docker images from previous steps
          command: docker load -i "caches/docker-cache-$CIRCLE_SHA1.tar"

jobs:
  install:
    executor: golang
    steps:
      - checkout
      - install_dependencies

      - persist_to_workspace:
          root: .
          paths:
            - .

  verify:
    executor: golang
    steps:
      - attach_golang_workspace

      - run:
          name: Check the style
          command: make style

      - run:
          name: Vet the code
          command: make vet

      - run:
          name: Test the code
          command: make test-report

      - store_test_results:
          path: test-results

  build-image:
    executor: golang
    steps:
      - setup_remote_docker
      - attach_golang_workspace
      - docker_logins

      - run:
          name: Build the exporter Docker image if it does not exist
          command: |
            export IMAGE_TAG="nexus.in.ft.com:5000/monitoring-aggregation-ecs/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1"
            docker pull "$IMAGE_TAG" >/dev/null 2>&1 || true
            if $(docker image inspect "$IMAGE_TAG" >/dev/null 2>&1); then
              echo "Skipping build as image exists for git sha \"$CIRCLE_SHA1\""
              docker tag "$IMAGE_TAG" "financial-times/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1"
            else
              echo "Building new docker image"
              make build
            fi
            mkdir -p caches
            docker save -o "caches/docker-cache-$CIRCLE_SHA1.tar" "financial-times/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1"

      - persist_to_workspace:
          root: .
          paths:
            - .

  publish-revision:
    executor: golang
    steps:
      - setup_remote_docker
      - attach_golang_workspace
      - load_docker_image
      - docker_logins

      - run:
          name: Push the Docker image
          command: DOCKER_TAG="$CIRCLE_SHA1" make publish

  deploy-service:
    executor: python-node
    steps:
      - attach_workspace:
          at: ~/project
      - aws-cli/install

      # TODO: add tests for service responsiveness before rolling out multi-region
      - run:
          name: Update cloudformation stack eu-west-1
          command: DOCKER_TAG="$CIRCLE_SHA1" .circleci/do-exclusively.sh --branch $CIRCLE_BRANCH make deploy-stack
          environment:
            AWS_DEFAULT_REGION: eu-west-1

      - run:
          name: Update cloudformation stack us-east-1
          command: DOCKER_TAG="$CIRCLE_SHA1" .circleci/do-exclusively.sh --branch $CIRCLE_BRANCH make deploy-stack
          environment:
            AWS_DEFAULT_REGION: us-east-1

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - install

      - verify:
          requires:
            - install

      - build-image:
          context:
            - monitoring-agg-ecs-prod
            - dockerhub-shared
          requires:
            - install

      - ft-snyk-orb/scan-go-packages:
          context: monitoring-agg-ecs-prod
          requires:
            - install
            - build-image

      - publish-revision:
          context:
            - monitoring-agg-ecs-prod
            - dockerhub-shared
          requires:
            - verify
            - build-image
            - ft-snyk-orb/scan-go-packages
          filters:
            branches:
              only:
                - master

      - deploy-service:
          name: deploy_test_service
          context: monitoring-agg-ecs-test
          requires:
            - publish-revision
          filters:
            branches:
              only:
                - master

      - change-api/release-log:
          context: monitoring-agg-ecs-test
          requires:
            - deploy_test_service
          systemCode: "prometheus-ecs-discovery"
          slackChannels: infra-delivery-builds
          environment: "test"
          filters:
            branches:
              only:
                - master

      - deploy-service:
          name: deploy_prod_service
          context: monitoring-agg-ecs-prod
          requires:
            - publish-revision
            - deploy_test_service
          filters:
            branches:
              only:
                - master

      - change-api/release-log:
          context: monitoring-agg-ecs-prod
          requires:
            - deploy_prod_service
          systemCode: "prometheus-ecs-discovery"
          slackChannels: infra-delivery-builds
          environment: "prod"
          filters:
            branches:
              only:
                - master

      - ft-snyk-orb/scan-and-monitor-go-packages:
          context: monitoring-agg-ecs-prod
          requires:
            - deploy_prod_service
          filters:
            branches:
              only:
                - master

      - ft-snyk-orb/scan-and-monitor-docker-images:
          context: monitoring-agg-ecs-prod
          requires:
            - deploy_prod_service
          filters:
            branches:
              only:
                - master

experimental:
  notify:
    branches:
      only:
        - master
